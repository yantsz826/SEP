using System;
using MvcApplication1.Models;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace MvcApplication1.Controllers
{
    public class ManageProfileController : Controller
    {
        //Database
        UserEntities _db;
        //
        // GET: /ManageProfile/

        //Initail controller instance
        public ManageProfileController()
        {
            _db = new UserEntities();
        }

        //display the form for profile edit and register
        public ActionResult EditProfile()
        {
            return View();
        }

        //for process the form submit
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult EditProfile(FormCollection form)
        {
            // Get profile to update
            var id = Int32.Parse(form["VendorID"]);
            var NewProfile = _db.Profiles.First(m => m.VendorID == id);

            TryUpdateModel(NewProfile, new string[] { "Password", "Email" }, form.ToValueProvider());


            if (string.IsNullOrEmpty(NewProfile.Password) && VerifyPWD(NewProfile.Password) == false)
            {
                //pwd can not be empty or un-eligible char
                ModelState.AddModelError("Password", "Please enter Password correctly !");
            }
            else if (string.IsNullOrEmpty(NewProfile.Email) && VerifyEmail(NewProfile.Email) == false)
            {
                //email can not be empty
                ModelState.AddModelError("Email", "Please enter Email correctly !");
            }

            if (ModelState.IsValid)
            {
                _db.SaveChanges();

                //back to home page
                return RedirectToAction("Index");
            }

            //otherwise, reshow form
            return View(NewProfile);
        }

        //Verify pwd in right formate [a-z] [A-Z] [0-9] && 8-12 length && 2 upcase-letter and 1 number at least
        private Boolean VerifyPWD(string tempPwd)
        {
            Boolean pass = false;
            int letterUp = 0;
            int number = 0;
            int min = 8;
            int max = 12;

            if (tempPwd.Length <= max && tempPwd.Length >= min && System.Text.RegularExpressions.Regex.IsMatch(tempPwd, @"([A-Z]|[a-z]|[0-9]|-|_){1,}") == true)
            {
                for (int i = 0; i < tempPwd.Length; i++)
                {
                    char c = tempPwd[i];
                    if (char.IsUpper(c))
                    {
                        letterUp++;
                    }
                    else if (char.IsDigit(c))
                    {
                        number++;
                    }
                }
            }

            if (letterUp >= 1 && number >= 2)
            {
                pass = true;
            }

            return pass;
        }

        //Verify email format by regex
        private Boolean VerifyEmail(string tempEmail)
        {
            Boolean pass = false;

            pass = System.Text.RegularExpressions.Regex.IsMatch(tempEmail, @"^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$");

            return pass;
        }
    }
}
